#!/bin/sh



##################################################
#                   ARGUMENTS                    #
while [ $# -gt 0 ]; do
    case $1 in
        -h|--help)
            printf "Usage: $0 [OPTION]\n"
            printf "\n"
            printf "Available options are:\n"
            printf "    -h, --help    Show this help message\n"
            printf "    --skip-auth   Skip vault authentication related tasks\n"
            printf "    --debug       Enable debug mode\n"
            printf "\n"
            exit 0
            ;;
        --skip-auth)
            SKIP_AUTH=true
            shift
            ;;
        --debug)
            DEBUG_MODE=true
            shift
            ;;
        *)
            printf "Unknown option $1\n$0 --help for usage\n"
            exit 1
            ;;
    esac
done
##################################################



##################################################
#                TEXT FORMATTING                 #
TASK_NAME="format"

#                     COLORS                     #
black="\033[38;5;0m"        # black
red="\033[38;5;1m"          # red
green="\033[38;5;2m"        # green
yellow="\033[38;5;3m"       # yellow
blue="\033[38;5;4m"         # blue
purple="\033[38;5;5m"       # purple
cyan="\033[38;5;6m"         # cyan
white="\033[38;5;7m"        # white
gray="\033[38;5;8m"         # gray

# formatting
rf='\033[0m'              # reset formatting
bold='\033[1m'            # bold
underline='\033[4m'       # underline
intense='\033[0;90m'      # intense

#                    SYMBOLS                     #
default_symbol="•"
check_mark="✔"
x_mark="✘"
warning="!"
right_arrow="➜"
key_icon="🗝"

#                   FUNCTIONS                    #
task_name() { printf "${gray}[${TASK_NAME}]${rf}"; }
pprint() { printf "${bold}${white}${default_symbol}${rf} %s ${@}\n" "$(task_name)"; } # prretty print
pprint_check() { printf "${bold}${green}${check_mark}${rf} %s ${@}\n" "$(task_name)"; } # prretty print check
pprint_error() { printf "${bold}${red}${x_mark}${rf} %s ${@}\n" "$(task_name)"; } # prretty print x
pprint_warning() { printf "${bold}${yellow}${warning}${rf} %s ${@}\n" "$(task_name)"; } # prretty print warning
pprint_error_info() { printf "${bold}${red}${default_symbol}${rf} %s ${@}\n" "$(task_name)"; } # prretty print error log or info
pprint_skip() { printf "${bold}${blue}${right_arrow}${rf} %s ${@}\n" "$(task_name)"; } # prretty print skip

print_icon() { printf "${1} %s " "$(task_name)"; shift; printf "${@}\n"; } # print icon
##################################################



##################################################
#                 INITIALIZATION                 #
TASK_NAME="init"

START_TIME=$(date +%s)
SKIP_AUTH=${SKIP_AUTH:-false}
DEBUG_MODE=${DEBUG_MODE:-false}
if $DEBUG_MODE; then pprint_warning "${yellow}Debug mode enabled${rf}"; fi

PROCESSOR_ARCHITECTURE=$(uname -m | tr '[:upper:]' '[:lower:]' || echo "unknown")
case "$PROCESSOR_ARCHITECTURE" in x86_64) ARCH="amd64";; arm64) ARCH="arm64";; *) echo "Unknown processor architecture" && exit 1;; esac
OPERATING_SYSTEM=$(uname -o | tr '[:upper:]' '[:lower:]' || echo "unknown")
case "$OPERATING_SYSTEM" in *linux*) OS="linux";; *darwin*) OS="darwin";; *) echo "Unknown operating system" && exit 1;; esac
LINUX_DISTRO=$(awk -F'=' '/^ID=/ { gsub("\"","",$2); print tolower($2) }' /etc/*-release 2> /dev/null || echo "unknown")
RUNNING_USER=$(whoami)
SSH_DIR="$HOME/.ssh"
LC_ALL="C.UTF-8" # locale for ansible
HCP_CREDS_PATH="$HOME/.secrets/dotfiles_vault_creds"
TMP_LOG_FILE="/tmp/dotfiles.log"
DOTFILES_REPO_PATH="$HOME/.dotfiles"

export XDG_CONFIG_HOME="$HOME/.config"

pprint "Operating System: $OPERATING_SYSTEM"
pprint "Processor architecture: $PROCESSOR_ARCHITECTURE"
pprint "Linux distribution: $LINUX_DISTRO"
if [ "$RUNNING_USER" = "root" ]
then
    pprint_warning "Running as ${red}$RUNNING_USER${rf} is not recommended!"
    SUDO=""
else
    SUDO="sudo"
    pprint "Running as user ${green}$RUNNING_USER${rf}"
fi

cleanup() {
    exit_code=$?
    TASK_NAME="exit"
    END_TIME=$(date +%s)
    ELAPSED_TIME=$(($END_TIME - $START_TIME))
    ELAPESED_TIME_FORMATTED=$(printf '%dh:%dm:%ds\n' $(($ELAPSED_TIME/3600)) $(($ELAPSED_TIME%3600/60)) $(($ELAPSED_TIME%60)))
    
    rm -f "$TMP_LOG_FILE"
    
    if [ $exit_code -eq 0 ]
    then
        pprint "Cleaned up"
    else
        pprint_error "Cleaned up and exit with code $exit_code"
    fi
    exit $exit_code
}
pprint "Registering signal handlers"
trap cleanup EXIT INT TERM HUP QUIT
##################################################



##################################################
#                  REQUIREMENTS                  #
TASK_NAME="require"

# Check if $HOME/.local/bin is in PATH
case ":$PATH:" in
    *":$HOME/.local/bin:"*)
        pprint "$HOME/.local/bin is in PATH"
        ;;
    *)
        pprint_warning "${yellow}$HOME/.local/bin${rf} is not in PATH"
        pprint "Adding $HOME/.local/bin to PATH in local scope"
        export PATH="$HOME/.local/bin:$PATH"
        ;;
esac

# Check $XDG_CONFIG_HOME exists
if [ ! -d "$XDG_CONFIG_HOME" ]; then
    pprint_warning "Directory $XDG_CONFIG_HOME not found"
    pprint "Creating directory $XDG_CONFIG_HOME..."
    mkdir -p "$XDG_CONFIG_HOME" > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to create directory $XDG_CONFIG_HOME"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
    pprint_check "Created directory ${green}$XDG_CONFIG_HOME${rf}"
else
    pprint "Directory $XDG_CONFIG_HOME found"
fi

# function to install with package manager
install_with_package_manager() {
    case "$OPERATING_SYSTEM" in
        *linux*)
            case "$LINUX_DISTRO" in
                *ubuntu*|*debian*)
                    $SUDO apt-get -y install "$1" > $TMP_LOG_FILE 2>&1; if [ $? -ne 0 ]; then pprint_error "Failed to install $1"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
                    ;;
                *arch*)
                    $SUDO pacman -S "$1" --noconfirm > $TMP_LOG_FILE 2>&1; if [ $? -ne 0 ]; then pprint_error "Failed to install $1"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
                    ;;
                *fedora*)
                    $SUDO dnf -y install "$1" > $TMP_LOG_FILE 2>&1; if [ $? -ne 0 ]; then pprint_error "Failed to install $1"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
                    ;;
                *centos*)
                    $SUDO yum -y install "$1" > $TMP_LOG_FILE 2>&1; if [ $? -ne 0 ]; then pprint_error "Failed to install $1"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
                    ;;
                *alpine*)
                    $SUDO apk add "$1" > $TMP_LOG_FILE 2>&1; if [ $? -ne 0 ]; then pprint_error "Failed to install $1"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
                    ;;
                *)
                    pprint "${red}Unknown Linux distribution${rf}"
                    exit 1
                    ;;
            esac
            ;;
        *darwin*)
            brew install "$1" > $TMP_LOG_FILE 2>&1; if [ $? -ne 0 ]; then pprint_error "Failed to install $1"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
            ;;
        *)
            pprint "${red}Unknown operating system${rf}"
            exit 1
            ;;
    esac
}

# Check curl is installed
if ! command -v curl > $TMP_LOG_FILE 2>&1
then
    pprint_warning "${yellow}curl${rf} not found"
    pprint "Installing curl..."
    install_with_package_manager curl
    pprint_check "${green}curl${rf} installed"
else
    pprint_check "${green}curl${rf} found"
fi

# Check for homebrew on MACOS
case "$OPERATING_SYSTEM" in
    *darwin*)
        if ! command -v brew > $TMP_LOG_FILE 2>&1
        then
            pprint_warning "${yellow}brew${rf} not found"
            pprint "Installing brew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" > $TMP_LOG_FILE 2>&1
            if [ $? -ne 0 ]; then pprint_error "Failed to install brew"; pprint_error_info "$(cat $TMP_LOG_FILE)"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
        else
            pprint_check "${green}brew${rf} found"
        fi
        ;;
esac 

# Check jq is installed
if ! command -v jq > $TMP_LOG_FILE 2>&1
then
    pprint_warning "${yellow}jq${rf} not found"
    pprint "Installing jq..."
    install_with_package_manager jq
    pprint_check "${green}jq${rf} installed"
else
    pprint_check "${green}jq${rf} found"
fi

# Check git is installed
if ! command -v git > $TMP_LOG_FILE 2>&1
then
    pprint_warning "${yellow}git${rf} not found"
    pprint "Installing git..."
    install_with_package_manager git
    pprint_check "${green}git${rf} installed"
else
    pprint_check "${green}git${rf} found"
fi

if [ ! -d "$HOME/.local/bin" ]; then
    pprint_warning "Directory $HOME/.local/bin not found"
    pprint "Creating directory $HOME/.local/bin..."
    mkdir -p "$HOME/.local/bin" > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to create directory $HOME/.local/bin"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
    pprint_check "Created directory ${green}$HOME/.local/bin${rf}"
else
    pprint "Local bin directory found"
fi

for file in "$DOTFILES_REPO_PATH/bin/"*; do
    # check if link already exists
    if [ -L "$HOME/.local/bin/$(basename "$file")" ]; then continue; fi
    pprint "Linking $file <-> $HOME/.local/bin"
    ln -sf "$file" "$HOME/.local/bin/$(basename "$file")" > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to link $file to $HOME/.local/bin/$(basename "$file")"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
done
##################################################



##################################################
#                      GIT                       #
TASK_NAME="git"

# Check if dotfiles repository is cloned
if [ ! -d "$DOTFILES_REPO_PATH" ]
then
    pprint_warning "Dotfiles repository not found"
    pprint "Cloning dotfiles repository..."
    git clone --depth 1 --branch main https://github.com/irohn/dotfiles.git "$DOTFILES_REPO_PATH" > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to clone dotfiles repository"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
    pprint_check "Dotfiles repository cloned"
else
    pprint "Dotfiles repository is present"
    # Check if dotfiles repository is up to date
    cd "$DOTFILES_REPO_PATH"
    git fetch --depth 1 origin > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to fetch dotfiles repository"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
    if [ "$(git rev-parse HEAD)" != "$(git rev-parse @{u})" ]
    then
        pprint_warning "Dotfiles repository is not up to date"
        pprint "Pulling latest changes..."
        git pull > $TMP_LOG_FILE 2>&1
        if [ $? -ne 0 ]; then pprint_error "Failed to pull dotfiles repository"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
        pprint_check "Dotfiles repository is up to date"
    else
        pprint_check "Dotfiles repository is up to date"
    fi
fi
##################################################



##################################################
#                      VAULT                     #
TASK_NAME="vault"

if $SKIP_AUTH; then
    pprint_skip "Skipping vault related tasks"
else
    if ! command -v vlt > $TMP_LOG_FILE 2>&1
    then
        if ! command -v unzip > $TMP_LOG_FILE 2>&1
        then
            pprint_warning "${yellow}unzip${rf} not found"
            pprint "Installing unzip..."
            install_with_package_manager unzip
            pprint_check "${green}unzip${rf} installed"
        else
            pprint_check "${green}unzip${rf} found"
        fi
        # Try to install vlt
        VLT_VERSION="1.0.0"
        VLT_URL="https://releases.hashicorp.com/vlt/${VLT_VERSION}/vlt_${VLT_VERSION}_${OS}_${ARCH}.zip"
        pprint "Downloading vlt..."
        curl -L -o /tmp/vlt.zip $VLT_URL > $TMP_LOG_FILE 2>&1
        if [ $? -ne 0 ]; then
            pprint_error "Failed to download vlt"
            pprint_error_info "$(cat $TMP_LOG_FILE)"
            exit 1
        else
            pprint_check "vlt downloaded"
        fi
        pprint "Installing vlt..."
        unzip /tmp/vlt.zip -d "$HOME/.local/bin" > $TMP_LOG_FILE 2>&1
        if [ $? -ne 0 ]; then
            pprint_error "Failed to install vlt"
            pprint_error_info "$(cat $TMP_LOG_FILE)"
            exit 1
        else
            rm /tmp/vlt.zip > $TMP_LOG_FILE 2>&1
            pprint_check "vlt installed"
        fi
        if [ $? -ne 0 ]; then
            pprint_error "Failed to install vlt"
            pprint_error_info "To install manually go to"
            pprint_error_info "${underline}${blue}https://developer.hashicorp.com/vault/tutorials/hcp-vault-secrets-get-started/hcp-vault-secrets-install-cli${rf}"
            exit 1
        else
            pprint_check "${green}vlt${rf} installed"
        fi
    else
        pprint_check "${green}vlt${rf} found"
    fi
    if [ ! -f "$HCP_CREDS_PATH" ]; then
        pprint_error "Credentials file $HCP_CREDS_PATH not found"
        exit 1
    fi
    if [ "$(stat -c "%a" "$HCP_CREDS_PATH")" != "660" ]; then
        pprint_error "HCP client credentials file has incorrect permissions"
        pprint_error_info "Please run: ${yellow}chmod 660 $HCP_CREDS_PATH${rf}"
        exit 1
    fi
    # Set environment variables from HCP secret files, using export so they are available to child processes
    export HCP_CLIENT_ID=$(jq -r '.client_id' "$HCP_CREDS_PATH")
    if [ -z "$HCP_CLIENT_ID" ]; then
        pprint_error "HCP client ID is empty"
        exit 1
    fi

    export HCP_CLIENT_SECRET=$(jq -r '.client_secret' "$HCP_CREDS_PATH")
    if [ -z "$HCP_CLIENT_SECRET" ]; then
        pprint_error "HCP client secret is empty"
        exit 1
    fi

    export HCP_ORGANIZATION=$(jq -r '.organization' "$HCP_CREDS_PATH")
    if [ -z "$HCP_ORGANIZATION" ]; then
        pprint_error "HCP organization is empty"
        exit 1
    fi

    export HCP_PROJECT=$(jq -r '.project' "$HCP_CREDS_PATH")
    if [ -z "$HCP_PROJECT" ]; then
        pprint_error "HCP project is empty"
        exit 1
    fi

    export HCP_APP_NAME=$(jq -r '.app_name' "$HCP_CREDS_PATH")
    if [ -z "$HCP_APP_NAME" ]; then
        pprint_error "HCP app name is empty"
        exit 1
    fi
    print_icon "${purple}$key_icon${rf}" "Logging in to vault..."
    vlt login > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then 
        pprint_error "Failed to login to vault"
        pprint_error_info "$(cat $TMP_LOG_FILE)"
        exit 1
    fi
    get_secret_from_vault() {
        vlt secrets get --organization "$HCP_ORGANIZATION" --project "$HCP_PROJECT" --app-name "$HCP_APP_NAME" --plaintext "$1"
    }
fi
##################################################



##################################################
#                     SHELL                      #
TASK_NAME="shell"

# Check if zsh already installed
if ! command -v zsh > $TMP_LOG_FILE 2>&1
then
    pprint_warning "${yellow}zsh${rf} not found"
    pprint "Installing zsh..."
    install_with_package_manager zsh
    pprint_check "${green}zsh${rf} installed"
else
    pprint_check "${green}zsh${rf} found"
fi
# Check if oh-my-zsh already installed
if [ -d "$HOME/.oh-my-zsh" ]; then
    pprint "oh-my-zsh already installed"
else
    # Install oh-my-zsh
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to install oh-my-zsh"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
fi

# Verify $HOME/.local/bin exists
if [ ! -d "$HOME/.local/bin" ]; then
    mkdir -p "$HOME/.local/bin" > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to create directory $HOME/.local/bin"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
fi

# Add $HOME/.local/bin to PATH
if ! grep -q "export PATH=\$HOME/.local/bin:\$PATH" "$HOME"/.zshrc; then
    printf 'export PATH=$HOME/.local/bin:$PATH\n' >> "$HOME"/.zshrc
    export PATH="$HOME/.local/bin:$PATH"
    pprint_check "Added $HOME/.local/bin to PATH in .zshrc"
fi

# Check if starship is already installed
if ! command -v starship > $TMP_LOG_FILE 2>&1; then
    curl -sS https://starship.rs/install.sh | sh -s -- -y --bin-dir $HOME/.local/bin > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to install starship"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
    # Make sure we eval starship in .zshrc and at the end of the file
    if ! grep -q "starship init zsh" "$HOME/".zshrc; then
        printf 'eval "$(starship init zsh)"\n' >> "$HOME/".zshrc
        pprint_check "Added starship init to .zshrc"
    fi
    pprint_check "Starship installed"
else
    pprint_check "${green}starship${rf} found"
    line_number=$(grep -n "starship init" "$HOME/".zshrc | cut -d : -f 1)
    sed -i "${line_number}d" "$HOME"/.zshrc
    printf 'eval "$(starship init zsh)"\n' >> "$HOME/".zshrc
    pprint_check "Moved starship init to the bottom of .zshrc"
fi

# Copy starship into XDG_CONFIG_HOME
    /bin/cp -rf "$DOTFILES_REPO_PATH"/apps/starship/starship.toml "$XDG_CONFIG_HOME"/starship.toml > $TMP_LOG_FILE 2>&1
    if [ $? -ne 0 ]; then pprint_error "Failed to copy starship.toml"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
    pprint_check "Copied starship.toml to $XDG_CONFIG_HOME"
##################################################



##################################################
#                      TMUX                      #
TASK_NAME="tmux"

# Check if tmux already installed
if ! command -v tmux > $TMP_LOG_FILE 2>&1
then
    pprint_warning "${yellow}tmux${rf} not found"
    pprint "Installing tmux..."
    install_with_package_manager tmux
    pprint_check "${green}tmux${rf} installed"
else
    pprint_check "${green}tmux${rf} found"
fi

# Check if tmux plugin manager already installed
if [ -d "$XDG_CONFIG_HOME/tmux/plugins/tpm" ]; then
    pprint "tmux plugin manager already installed"
else
    # Install tmux plugin manager
    git clone https://github.com/tmux-plugins/tpm "$XDG_CONFIG_HOME/tmux/plugins/tpm"
    if [ $? -ne 0 ]; then pprint_error "Failed to install tmux plugin manager"; pprint_error_info "$(cat $TMP_LOG_FILE)"; exit 1; fi
fi

##################################################